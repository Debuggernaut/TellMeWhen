<Ui>



	<Frame name="TellMeWhen_BarDisplayBarOptions" inherits="TellMeWhen_OptionsModuleContainer" virtual="true">
		<Size y="85"/>
		<Frames>
			<CheckButton name="$parentInvert" inherits="TellMeWhen_CheckTemplate" parentKey="Invert">
				<Anchors>
					<!-- Left anchor is handled by DistributeFrameAnchorsLaterally in parent's OnLoad -->
					<Anchor point="TOP" y="-1"/>
				</Anchors>
				<Scripts>
					<OnLoad>
						TMW:CInit(self)

						self:SetTexts(TMW.L["ICONMENU_INVERTBARS"], TMW.L["ICONMENU_INVERTBARDISPLAYBAR_DESC"])
						self:SetSetting("BarDisplay_Invert")
					</OnLoad>
				</Scripts>
			</CheckButton>
			
			<CheckButton name="$parentBarGCD" inherits="TellMeWhen_CheckTemplate" parentKey="BarGCD">
				<!-- Anchoring is handled by DistributeFrameAnchorsLaterally in parent's OnLoad -->
				<Scripts>
					<OnLoad>
						TMW:CInit(self)

						self:SetTexts(TMW.L["ICONMENU_ALLOWGCD"], TMW.L["ICONMENU_ALLOWGCD_DESC"])
						self:SetSetting("BarDisplay_BarGCD")
						
						self:CScriptAdd("ReloadRequested", function()
							self:SetShown(not TMW.CI.icon.typeData.hasNoGCD)
						end)
					</OnLoad>
				</Scripts>
			</CheckButton>
			
			<CheckButton name="$parentEnableColors" inherits="TellMeWhen_CheckTemplate" parentKey="EnableColors">
				<Anchors>
					<!-- Left anchor is handled by DistributeFrameAnchorsLaterally in parent's OnLoad -->
					<Anchor point="TOP" relativeTo="$parentInvert" relativePoint="BOTTOM" y="3"/>
				</Anchors>
				<Scripts>
					<OnLoad>
						TMW:CInit(self)

						self:SetTexts(TMW.L["ICONMENU_ENABLECOLORS"], TMW.L["ICONMENU_ENABLECOLORS_DESC"])
						self:SetSetting("BarDisplay_EnableColors")

						self:CScriptAdd("SettingSaved", function()
							if self:GetChecked() then
								TMW.HELP:Show{
									code = "COLOR_COPY_DRAG",
									icon = nil,
									relativeTo = self,
									x = 0,
									y = 0,
									text = format(TMW.L["ICONMENU_ENABLECOLORS_HELP"])
								}
							end
						end)
					</OnLoad>
				</Scripts>
			</CheckButton>
			
			<EditBox name="$parentFakeMax" inherits="TellMeWhen_TimeEditBoxTemplate" parentKey="FakeMax" autoFocus="false">
				<Size x="45" y="15"/>
				<Anchors>
					<Anchor point="TOP" relativeTo="$parentBarGCD" relativePoint="BOTTOM" y="-2"/>
				</Anchors>
				<Scripts>
					<OnLoad>
						self.text:SetText(TMW.L["ICONMENU_FAKEMAX"])
						--self.text:SetWidth(50)
						self.text:ClearAllPoints()
						self.text:SetPoint("LEFT", self, "RIGHT", 2, 0)
						self.text:SetPoint("RIGHT", self:GetParent(), "RIGHT", -5, 0)
						
						self:SetPoint("LEFT", self:GetParent().BarGCD, "LEFT", 8, 0)
						
						TMW:CInit(self)

						self:SetTexts(TMW.L["ICONMENU_FAKEMAX"], TMW.L["ICONMENU_FAKEMAX_DESC"])
						self:SetSetting("BarDisplay_FakeMax")

						self:CScriptAdd("ReloadRequested", function()
							local settings = self:GetSettingTable()
							self:SetEnabled(not settings.BarDisplay_Invert)
						end)
					</OnLoad>
				</Scripts>
			</EditBox>

			<Button name="$parentColorStart" parentKey="ColorStart" inherits="TellMeWhen_ColorButtonTemplate">
				<Anchors>
					<Anchor point="TOP" relativeTo="$parentFakeMax" relativePoint="BOTTOM" y="-10" />
				</Anchors>
				<Scripts>
					<OnLoad>
						TMW:CInit(self)

						self:SetTexts(TMW.L["ICONMENU_BAR_COLOR_START"], TMW.L["ICONMENU_BAR_COLOR_START_DESC"])
						self:SetSetting("BarDisplay_StartColor")
						self:SetHasOpacity(true)

						self:CScriptAdd("ReloadRequested", function()
							local settings = self:GetSettingTable()
							self:SetEnabled(settings.BarDisplay_EnableColors)
						end)
					</OnLoad>
				</Scripts>
			</Button>

			<Button name="$parentColorMiddle" parentKey="ColorMiddle" inherits="TellMeWhen_ColorButtonTemplate">
				<Anchors>
					<Anchor point="TOP" relativeTo="$parentColorStart" />
				</Anchors>
				<Scripts>
					<OnLoad>
						TMW:CInit(self)

						self:SetTexts(TMW.L["ICONMENU_BAR_COLOR_MIDDLE"], TMW.L["ICONMENU_BAR_COLOR_MIDDLE_DESC"])
						self:SetSetting("BarDisplay_MiddleColor")
						self:SetHasOpacity(true)

						self:CScriptAdd("ReloadRequested", function()
							local settings = self:GetSettingTable()
							self:SetEnabled(settings.BarDisplay_EnableColors)
						end)
					</OnLoad>
				</Scripts>
			</Button>

			<Button name="$parentColorComplete" parentKey="ColorComplete" inherits="TellMeWhen_ColorButtonTemplate">
				<Anchors>
					<Anchor point="TOP" relativeTo="$parentColorStart" />
				</Anchors>
				<Scripts>
					<OnLoad>
						TMW:CInit(self)

						self:SetTexts(TMW.L["ICONMENU_BAR_COLOR_COMPLETE"], TMW.L["ICONMENU_BAR_COLOR_COMPLETE_DESC"])
						self:SetSetting("BarDisplay_CompleteColor")
						self:SetHasOpacity(true)

						self:CScriptAdd("ReloadRequested", function()
							local settings = self:GetSettingTable()
							self:SetEnabled(settings.BarDisplay_EnableColors)
						end)
					</OnLoad>
				</Scripts>
			</Button>

		</Frames>
		<Scripts>
			<OnLoad>
				self.Header:SetText(TMW.L["CONFIGPANEL_TIMERBAR_BARDISPLAY_HEADER"])
				
				self.Invert:ConstrainLabel(self.BarGCD)
				self.BarGCD:ConstrainLabel(self, "RIGHT", -1, 0)

				self.EnableColors:ConstrainLabel(self.FakeMax)
				self.FakeMax:ConstrainLabel(self, "RIGHT", -1, 0)

				self.ColorStart:ConstrainLabel(self.ColorMiddle)
				self.ColorMiddle:ConstrainLabel(self.ColorComplete)
				self.ColorComplete:ConstrainLabel(self, "RIGHT", -1, 0)
				
				TMW.IE:DistributeFrameAnchorsLaterally(self, 2, self.Invert, self.BarGCD)
				TMW.IE:DistributeFrameAnchorsLaterally(self, 2, self.EnableColors)
				TMW.IE:DistributeFrameAnchorsLaterally(self, 3, self.ColorStart, self.ColorMiddle, self.ColorComplete)
			</OnLoad>
		</Scripts>
	</Frame>
 
</Ui>