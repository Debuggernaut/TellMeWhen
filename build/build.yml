

trigger:
  branches:
    include:
      - master
      - classic
  tags:
    include:
      - '*'

pr: none

pool:
  vmImage: 'ubuntu-latest'

steps:
- checkout: self
  submodules: true

- bash: printenv | sort
  displayName: "Dump Vars"

- bash: sudo apt-get install -y pandoc
  displayName: "Install Packages"

- bash: sudo chmod +x ./build/create-lua-changelog.sh && ./build/create-lua-changelog.sh
  displayName: "Build In-Game Changelog"
  workingDirectory: $(Build.SourcesDirectory)

- bash: sudo chmod +x ./build/create-short-changelog.sh && ./build/create-short-changelog.sh
  displayName: "Build Short Changelog"
  workingDirectory: $(Build.SourcesDirectory)

# "Usage: release.sh [-cdelLosuz] [-t topdir] [-r releasedir] [-p curse-id] [-w wowi-id] [-g game-version] [-m pkgmeta.yml]" >&2
# "  -c               Skip copying files into the package directory." >&2
# "  -d               Skip uploading." >&2
# "  -e               Skip checkout of external repositories." >&2
# "  -l               Skip @localization@ keyword replacement." >&2
# "  -L               Only do @localization@ keyword replacement (skip upload to CurseForge)." >&2
# "  -o               Keep existing package directory, overwriting its contents." >&2
# "  -s               Create a stripped-down \"nolib\" package." >&2
# "  -u               Use Unix line-endings." >&2
# "  -z               Skip zip file creation." >&2
# "  -t topdir        Set top-level directory of checkout." >&2
# "  -r releasedir    Set directory containing the package directory. Defaults to \"\$topdir/.release\"." >&2
# "  -p curse-id      Set the project id used on CurseForge for localization and uploading." >&2
# "  -w wowi-id       Set the addon id used on WoWInterface for uploading." >&2
# "  -g game-version  Set the game version to use for CurseForge uploading." >&2
# "  -m pkgmeta.yaml  Set the pkgmeta file to use." >&2
  
- bash: sudo chmod +x ./release.sh && ./release.sh
  displayName: "Package and Upload (CF and WoWI)"
  workingDirectory: $(Build.SourcesDirectory)/build/lib/packager
  env:
    CF_API_KEY: $(CF_API_KEY)
    WOWI_API_TOKEN: $(WOWI_API_TOKEN)

- bash: cat .pkgmeta | sed 's/CHANGELOG.md/CHANGELOG.short.md/gI' > gh-release.pkgmeta
  displayName: "Create GitHub release pkgmeta"
  workingDirectory: $(Build.SourcesDirectory)

- bash: sudo chmod +x ./release.sh && ./release.sh -o -e -c -l -m $(Build.SourcesDirectory)/gh-release.pkgmeta
  # -o: Overwrite existing directory, -e: Skip externals, -c: skip copying files
  # basically, we only want to upload to github using the short changelog specified by gh-release.pkgmeta.
  # Unfortunately, we still have to re-create the zip due to the way that release.sh works.
  displayName: "Create GitHub release"
  workingDirectory: $(Build.SourcesDirectory)/build/lib/packager
  env:
    GITHUB_OAUTH: $(GITHUB_OAUTH)

- bash: echo "##vso[build.updatebuildnumber]$(ls *.zip | sed -e 's/\.zip//')"
  displayName: "Set Build Number"
  workingDirectory: $(Build.SourcesDirectory)/.release

- task: PublishBuildArtifacts@1
  inputs:
    pathToPublish: $(Build.SourcesDirectory)/.release/
    artifactName: release